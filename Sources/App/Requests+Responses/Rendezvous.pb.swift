// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: Rendezvous.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// The information about a user allowed to register with the server
struct RV_AllowedUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The user name
  var name: String = String()

  /// The pin to use for registration
  var pin: UInt32 = 0

  /// The time until which the user can register (in seconds since 1.1.1970)
  var expiry: UInt32 = 0

  /// The number of tries until the registration is blocked.
  var numberOfTries: UInt32 = 0

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A device of an internal user
struct RV_UserDevice {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The public identity key of the device
  var publicKey: Data = SwiftProtobuf.Internal.emptyData

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// A user who stores his/her data on the server
struct RV_InternalUser {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The name of the user
  var name: String = String()

  /// The authentication token of the server
  var authToken: Data = SwiftProtobuf.Internal.emptyData

  /// The public identity key
  var publicKey: Data = SwiftProtobuf.Internal.emptyData

  /// The devices of the user
  var devices: [RV_UserDevice] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

/// The data stored on disk
struct RV_ManagementData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The administrator authentication token
  var adminToken: Data = SwiftProtobuf.Internal.emptyData

  /// The registered users who store their data on the server
  var internalUsers: [RV_InternalUser] = []

  /// The users allowed to register, index by their names
  var allowedUsers: Dictionary<String,RV_AllowedUser> = [:]

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "RV"

extension RV_AllowedUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AllowedUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "pin"),
    3: .same(proto: "expiry"),
    4: .same(proto: "numberOfTries"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularUInt32Field(value: &self.pin)
      case 3: try decoder.decodeSingularUInt32Field(value: &self.expiry)
      case 4: try decoder.decodeSingularUInt32Field(value: &self.numberOfTries)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if self.pin != 0 {
      try visitor.visitSingularUInt32Field(value: self.pin, fieldNumber: 2)
    }
    if self.expiry != 0 {
      try visitor.visitSingularUInt32Field(value: self.expiry, fieldNumber: 3)
    }
    if self.numberOfTries != 0 {
      try visitor.visitSingularUInt32Field(value: self.numberOfTries, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RV_AllowedUser, rhs: RV_AllowedUser) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.pin != rhs.pin {return false}
    if lhs.expiry != rhs.expiry {return false}
    if lhs.numberOfTries != rhs.numberOfTries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RV_UserDevice: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDevice"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "publicKey"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.publicKey)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RV_UserDevice, rhs: RV_UserDevice) -> Bool {
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RV_InternalUser: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InternalUser"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "authToken"),
    3: .same(proto: "publicKey"),
    4: .same(proto: "devices"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeSingularBytesField(value: &self.authToken)
      case 3: try decoder.decodeSingularBytesField(value: &self.publicKey)
      case 4: try decoder.decodeRepeatedMessageField(value: &self.devices)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.authToken.isEmpty {
      try visitor.visitSingularBytesField(value: self.authToken, fieldNumber: 2)
    }
    if !self.publicKey.isEmpty {
      try visitor.visitSingularBytesField(value: self.publicKey, fieldNumber: 3)
    }
    if !self.devices.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.devices, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RV_InternalUser, rhs: RV_InternalUser) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.authToken != rhs.authToken {return false}
    if lhs.publicKey != rhs.publicKey {return false}
    if lhs.devices != rhs.devices {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension RV_ManagementData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ManagementData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "adminToken"),
    2: .same(proto: "internalUsers"),
    3: .same(proto: "allowedUsers"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularBytesField(value: &self.adminToken)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.internalUsers)
      case 3: try decoder.decodeMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,RV_AllowedUser>.self, value: &self.allowedUsers)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.adminToken.isEmpty {
      try visitor.visitSingularBytesField(value: self.adminToken, fieldNumber: 1)
    }
    if !self.internalUsers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.internalUsers, fieldNumber: 2)
    }
    if !self.allowedUsers.isEmpty {
      try visitor.visitMapField(fieldType: SwiftProtobuf._ProtobufMessageMap<SwiftProtobuf.ProtobufString,RV_AllowedUser>.self, value: self.allowedUsers, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: RV_ManagementData, rhs: RV_ManagementData) -> Bool {
    if lhs.adminToken != rhs.adminToken {return false}
    if lhs.internalUsers != rhs.internalUsers {return false}
    if lhs.allowedUsers != rhs.allowedUsers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
